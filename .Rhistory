from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
from palmerpenguins import penguins
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
from palmerpenguins import penguins
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = board_folder('data/model', allow_pickle_read=True)
# Create pin
vetiver_pin_write(b, v, versioned=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Then you can auto-generate a {fastAPI} from this model with
app = VetiverAPI(v, check_prototype=True)
# Run the FastAPI server
#app.run(port=8080)
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
from palmerpenguins import penguins
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = board_folder('data/model', allow_pickle_read=True)
# Create pin
vetiver_pin_write(b, v, versioned=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
from palmerpenguins import penguins
con = connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
quit
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
install.packages("DBI")
renv::snapshot()
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
install.packages("duckdb")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
df <- palmerpenguins::penguins
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
reticulate::repl_python()
con.close()
quit
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
# Load the Data
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
packages.install("dbplyr")
package.install("dbplyr")
install.packages("dbplyr")
# Use the Database
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
req <- httr2::request("http://127.0.0.1:8080/predict") |>
httr2::req_body_json(
list(
list(
"bill_length_mm" = 0,
"species_Chinstrap" = FALSE,
"species_Gentoo" = FALSE,
"sex_male" = FALSE
)
)
) |>
httr2::req_perform()
install.packages("httr2")
renv::snapshot()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(dbplyr)
library(httr2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
DBI::dbDisconnect()
DBI::dbDisconnect(con)
# Use the Database
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(dbplyr)
library(httr2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
# Use the Database
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
req <- httr2::request("http://127.0.0.1:8080/predict") |>
httr2::req_body_json(
list(
list(
"bill_length_mm" = 0,
"species_Chinstrap" = FALSE,
"species_Gentoo" = FALSE,
"sex_male" = FALSE
)
)
) |>
httr2::req_perform()
req <- httr2::request("http://127.0.0.1:8080/predict") |>
httr2::req_body_json(
list(
list(
"bill_length_mm" = 0,
"species_Chinstrap" = FALSE,
"species_Gentoo" = FALSE,
"sex_male" = FALSE
)
)
) |>
httr2::req_perform()
# Run the application
shinyApp(ui = ui, server = server)
install.packages("shiny")
shiny::runApp()
renv::snapshot()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(dbplyr)
library(httr2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
# Load the Data
#con <- DBI::dbConnect(duckdb::duckdb(), dbdir = #"my-db.duckdb")
#DBI::dbWriteTable(con, "penguins", #palmerpenguins::penguins)
#DBI::dbDisconnect(con)
# Use the Database
#con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
#df <- dplyr::tbl(con, "penguins")
#DBI::dbDisconnect(con)
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
#req <- httr2::request("http://127.0.0.1:8080/predict") |>
#  httr2::req_body_json(
#    list(
#      list(
#        "bill_length_mm" = 0,
#        "species_Chinstrap" = FALSE,
#        "species_Gentoo" = FALSE,
#        "sex_male" = FALSE
#      )
#    )
#  ) |>
#  httr2::req_perform()
#res <- httr2::resp_body_json(req)$predict[[1]]
reticulate::repl_python()
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = board_folder('data/model', allow_pickle_read=True)
# Create pin
vetiver_pin_write(b, v, versioned=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Then you can auto-generate a {fastAPI} from this model with
app = VetiverAPI(v, check_prototype=True)
# Run the FastAPI server
app.run(port=8080)
# Load the Data in Python
#con = connect('my-db.duckdb')
#df = penguins.load_penguins()
#con.execute('CREATE TABLE penguins AS SELECT * FROM df')
#con.close()
# Use the Database
#con = duckdb.connect('my-db.duckdb')
#df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
#con.close()
#req_data = {
#  "bill_length_mm": 0,
#  "species_Chinstrap": False,
#  "species_Gentoo": False,
#  "sex_male": False
#}
#req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
#res = req.json().get('predict')[0]
# Then you can auto-generate a {fastAPI} from this model with
app = VetiverAPI(v, check_prototype=True)
# Run the FastAPI server
#app.run(port=8080)
reticulate::repl_python()
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = board_folder('data/model', allow_pickle_read=True)
# Create pin
vetiver_pin_write(b, v, versioned=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Then you can auto-generate a {fastAPI} from this model with
app = VetiverAPI(v, check_prototype=True)
# Run the FastAPI server
app.run(port=8080)
quit
shiny::runApp()
reticulate::repl_python()
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = board_folder('data/model', allow_pickle_read=True)
# Create pin
vetiver_pin_write(b, v, versioned=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Then you can auto-generate a {fastAPI} from this model with
app = VetiverAPI(v, check_prototype=True)
# Prepare Docker File
prepare_docker(b, ‘penguin_model’)
# Then you can auto-generate a {fastAPI} from this model with
app = VetiverAPI(v, check_prototype=True)
# Prepare Docker File
from vetiver import prepare_docker
prepare_docker(b, ‘penguin_model’)
# Then you can auto-generate a {fastAPI} from this model with
app = VetiverAPI(v, check_prototype=True)
# Prepare Docker File
from vetiver import prepare_docker
prepare_docker(b, "penguin_model")
quit
runApp()
renv::snapshot()
library(quarto)
install.packages("quarto")
library(quarto)
quarto_render()
quarto_render()
traceback()
renv::snapshot()
quarto_render()
library(quarto)
quarto_render()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(dbplyr)
library(httr2)
df <- palmerpenguins::penguins
reticulate::repl_python()
# Chapter 1 Dependencies
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 2 Dependencies
from vetiver import VetiverModel
from pins import board_folder
from pins import board_temp
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
# Chapter 3 Dependencies
import requests
import duckdb
from duckdb import connect
quarto_render()
library(quarto)
quit
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(dbplyr)
library(httr2)
df <- palmerpenguins::penguins
library(quarto)
quarto_render()
renv::snapshot()
install.packages("rmarkdown")
renv::install("rmarkdown")
install.packages("renv")
